import { defineStore } from "pinia";
import { ref } from "vue";
import { Item, PointModel, ShopWithitems, Stock } from "../openapi";
import { openApi } from "../utils/openApi";
import { useUserStore } from "./user";

export const useShopStore = defineStore('shop', () => {
    const userStore = useUserStore()
    const shops = ref<ShopWithitems[]>([])
    const items = ref<Item[]>([])
    const itemImages = ref<{[key: string]: string}>({})
    const shopMaps = ref<{[key: string]: string}>({})
    const shopIcons = ref<{[key: string]: string}>({})
    const initShop = async () => {
        const userShopsId = userStore.user.shops ?? []
        shops.value = await Promise.all(userShopsId.map((value) => openApi.getShopShopShopIdGet(value).then((res) => res.data)))
        shops.value.forEach((shop) => {
            shopMaps.value[shop.id]=`/api/v1/image/map/${shop.id}/`
            shopIcons.value[shop.id]=`/api/v1/image/shop/${shop.id}/`
        })
    }
    const initItems = async () => {
        items.value = await Promise.all(((shops.value.map((value) => value.items)).flat() ?? []).flatMap((value) => value == undefined ? [] : openApi.getItemItemItemIdGet(value).then((res) => res.data)))
        items.value.forEach((item) => {
            itemImages.value[item.id]=`/api/v1/image/item/${item.id}/`
        })
    }
    const createShop = async (name: string, description: string, address: string, coordinates:number[]) => {
        const res = await openApi.createShopShopPut({
            name: name,
            description: description,
            address: address,
            user_id: userStore.user.id,
            token: userStore.user.token ?? "",
            coordinate:{
                type:"Point",
                coordinates:coordinates
            }
        })
        shops.value = shops.value.concat([{
            id: res.data.id,
            name: res.data.name,
            description: res.data.description,
            address: res.data.address,
            coordinate: res.data.coordinate,
            items: []
        }])
        return res.data.id
    }
    const updateShop = async (shopId: string, name?:string|undefined, description?: string|undefined, address?: string | undefined, coordinate?:PointModel | undefined) => {
        shops.value = await Promise.all(shops.value.map(async (value) => {
            if (value.id == shopId) {
                await openApi.updateShopShopShopIdPut(shopId, { name:name ?? value.name, description:description ?? value.description, address:address ?? value.address, coordinate:coordinate ?? value.coordinate, user_id: userStore.user.id, token: userStore.user.token ?? "" })
                return { id:value.id, name:name ?? value.name, description:description ?? value.description, address:address ?? value.address, coordinate:coordinate ?? value.coordinate, user_id: userStore.user.id, token: userStore.user.token ?? "" }
            } else {
                return value
            }
        }))
    }
    const updateShopIcon = async (shopId: string, icon :File|undefined) => {
        await openApi.setShopimageImageShopShopIdPut(shopId, userStore.user.id, userStore.user.token ?? "", icon)
        shopIcons.value[shopId]=URL.createObjectURL(icon as Blob)
    }
    const updateShopMap = async (shopId: string, icon :File|undefined) => {
        await openApi.setShopmapImageMapShopIdPut(shopId, userStore.user.id, userStore.user.token ?? "", icon)
        shopMaps.value[shopId]=URL.createObjectURL(icon as Blob)
    }
    const deleteShop = async (shopId: string) => {
        await openApi.deleteShopShopShopIdDelete(shopId, { user_id: userStore.user.id, token: userStore.user.token ?? "" })
        shops.value = shops.value.filter((value) => value.id != shopId)
    }
    const createItem = async (name: string, description: string, stock: Stock, shop_id: string) => {
        const res = await openApi.createItemItemPut({
            name: name,
            description: description,
            stock: stock,
            shop_id: shop_id,
            user_id: userStore.user.id,
            token: userStore.user.token ?? "",
        })
        items.value = items.value.concat({
            id: res.data.id,
            name: res.data.name,
            shop_id: res.data.shop_id,
            description: res.data.description,
            stock: res.data.stock
        })
        return res.data.id
    }
    const updateItem = async (itemId: string, name?:string|undefined, description?:string|undefined, stock?:Stock|undefined) => {
        items.value = await Promise.all(items.value.map(async (value) => {
            if (value.id == itemId) {
                await openApi.updateItemItemItemIdPut(itemId, {user_id: userStore.user.id, token: userStore.user.token ?? "", name:name ?? value.name, description: description ?? value.description, stock:stock ?? value.stock})
                return {id: value.id, shop_id:value.shop_id, name:name ?? value.name, description: description ?? value.description, stock:stock ?? value.stock}
            } else {
                return value
            }
        }))
    }
    const updateItemIcon = async (itemId: string, icon:File|undefined) => {
        await openApi.setItemimageImageItemItemIdPut(itemId, userStore.user.id, userStore.user.token ?? "", icon)
        itemImages.value[itemId]=URL.createObjectURL(icon as Blob)
    }
    const deleteItem = async (itemId: string) => {
        await openApi.deleteItemItemItemIdDelete(itemId, { user_id: userStore.user.id, token: userStore.user.token ?? "" })
        items.value = items.value.filter((value) => value.id != itemId)
    }
    return { shops, items, createShop, updateShop, updateShopIcon, updateShopMap, deleteShop, initShop, initItems, createItem, updateItem, updateItemIcon, deleteItem, itemImages, shopIcons, shopMaps }
})
import { defineStore } from "pinia";
import { computed, reactive, ref } from "vue";
import { UserWithshops } from "../openapi";
import { openApi } from "../utils/openApi";

export const useUserStore = defineStore('auth', () => {
    const user = reactive<UserWithshops>({
        id: "",
        name: "",
        email: "",
        is_store: false,
        shops: [],
        token: "",
    })
    const isSignin = computed(() => user.token != "")
    const userIcon = ref(`/api/v1/image/user/${sessionStorage.getItem("id")}/`)
    const setUser = (data: UserWithshops) => {
        user.id = data.id
        user.name = data.name
        user.email = data.email
        user.is_store = data.is_store
        user.shops = data.shops
        user.token = data.token
        userIcon.value = `/api/v1/image/user/${data.id}/?temp=${Math.random()}`
        sessionStorage.setItem("token", data.token ?? "")
        sessionStorage.setItem("id", data.id)
    }
    const init = async () => {
        const id = sessionStorage.getItem("id")
        const token = sessionStorage.getItem("token")
        if (id != null && token != null) {
            const res = await openApi.userUserIdGet(id, token);
            setUser(res.data)
        }
    }
    const signIn = async (email: string, password: string) => {
        const res = await openApi.signinSigninPost({ email: email, password: password })
        setUser(res.data)
    }
    const signUp = async (name: string, email: string, password: string, is_store: boolean) => {
        await openApi.signupSignupPost({ name: name, email: email, password: password, is_store: is_store })
        const res = await openApi.signinSigninPost({ email: email, password: password })
        setUser(res.data)
    }
    const signOut = async () => {
        await openApi.signoutSignoutPost({ id: user.id, token: user.token ?? "" })
        user.id = ""
        user.name = ""
        user.email = ""
        user.is_store = false
        user.shops = []
        user.token = ""
        sessionStorage.clear()
    }
    const updateInfo = async (name: string, email:string) => {
        await openApi.userUserIdPut(user.id, { token: user.token ?? "", name: name, email: email })
        user.name = name
        user.email=email
    }
    const updatePassword = async (oldPassword: string, newPassword: string) => {
        await openApi.userUserIdPut(user.id, { token: user.token ?? "", oldpassword: oldPassword, newpassword: newPassword })
    }
    const updateIcon = async (image: File | undefined) => {
        await openApi.setUsericonImageUserUserIdPut(user.id, user.token ?? "", image)
        userIcon.value=URL.createObjectURL(image as Blob)
    }
    const updateIsStore = async (is_store: boolean) => {
        await openApi.userUserIdPut(user.id, { token: user.token ?? "", is_store: is_store })
        user.is_store = is_store
    }
    const deleteUser = async (password : string) => {
        await openApi.userUserIdDelete(user.id, { token: user.token ?? "", password: password})
        user.id = ""
        user.name = ""
        user.email = ""
        user.is_store = false
        user.shops = []
        user.token = ""
        sessionStorage.clear()
    }
    return { user, isSignin, userIcon, init, signIn, signUp, signOut, updateInfo, updatePassword, updateIcon, updateIsStore, deleteUser }
})
/* tslint:disable */
/* eslint-disable */
/**
 * Manabu Market
 * Manabu Market Backend API
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CoordinateLatitude
 */
export interface CoordinateLatitude {
}
/**
 * 
 * @export
 * @interface CoordinateLongitude
 */
export interface CoordinateLongitude {
}
/**
 * 
 * @export
 * @interface Coordinates
 */
export interface Coordinates {
    /**
     * 
     * @type {CoordinateLongitude}
     * @memberof Coordinates
     */
    'lon': CoordinateLongitude;
    /**
     * 
     * @type {CoordinateLatitude}
     * @memberof Coordinates
     */
    'lat': CoordinateLatitude;
}
/**
 * 
 * @export
 * @interface CreateItem
 */
export interface CreateItem {
    /**
     * 
     * @type {string}
     * @memberof CreateItem
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateItem
     */
    'description'?: string;
    /**
     * 
     * @type {Stock}
     * @memberof CreateItem
     */
    'stock': Stock;
    /**
     * 
     * @type {string}
     * @memberof CreateItem
     */
    'shop_id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateItem
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateItem
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface CreateShop
 */
export interface CreateShop {
    /**
     * 
     * @type {string}
     * @memberof CreateShop
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateShop
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateShop
     */
    'address': string;
    /**
     * 
     * @type {PointModel}
     * @memberof CreateShop
     */
    'coordinate': PointModel;
    /**
     * 
     * @type {string}
     * @memberof CreateShop
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateShop
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface DeleteItem
 */
export interface DeleteItem {
    /**
     * 
     * @type {string}
     * @memberof DeleteItem
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof DeleteItem
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface DeleteShop
 */
export interface DeleteShop {
    /**
     * 
     * @type {string}
     * @memberof DeleteShop
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof DeleteShop
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface DeleteUser
 */
export interface DeleteUser {
    /**
     * 
     * @type {string}
     * @memberof DeleteUser
     */
    'token': string;
    /**
     * User password
     * @type {string}
     * @memberof DeleteUser
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface EditItem
 */
export interface EditItem {
    /**
     * 
     * @type {string}
     * @memberof EditItem
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EditItem
     */
    'description'?: string;
    /**
     * 
     * @type {Stock}
     * @memberof EditItem
     */
    'stock': Stock;
    /**
     * 
     * @type {string}
     * @memberof EditItem
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof EditItem
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface EditShop
 */
export interface EditShop {
    /**
     * 
     * @type {string}
     * @memberof EditShop
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EditShop
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditShop
     */
    'address': string;
    /**
     * 
     * @type {PointModel}
     * @memberof EditShop
     */
    'coordinate': PointModel;
    /**
     * 
     * @type {string}
     * @memberof EditShop
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof EditShop
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface Forbidden
 */
export interface Forbidden {
    /**
     * 
     * @type {string}
     * @memberof Forbidden
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof Forbidden
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'description': string;
    /**
     * 
     * @type {Stock}
     * @memberof Item
     */
    'stock': Stock;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'shop_id': string;
}
/**
 * 
 * @export
 * @interface ItemNotFound
 */
export interface ItemNotFound {
    /**
     * 
     * @type {string}
     * @memberof ItemNotFound
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemNotFound
     */
    'item_id'?: string;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface PointModel
 */
export interface PointModel {
    /**
     * 
     * @type {string}
     * @memberof PointModel
     */
    'type'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof PointModel
     */
    'coordinates': Array<any>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const SSOServices = {
    Google: 'google'
} as const;

export type SSOServices = typeof SSOServices[keyof typeof SSOServices];


/**
 * 
 * @export
 * @interface Shop
 */
export interface Shop {
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'address': string;
    /**
     * 
     * @type {PointModel}
     * @memberof Shop
     */
    'coordinate': PointModel;
}
/**
 * 
 * @export
 * @interface ShopNotFound
 */
export interface ShopNotFound {
    /**
     * 
     * @type {string}
     * @memberof ShopNotFound
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopNotFound
     */
    'shop_id'?: string;
}
/**
 * 
 * @export
 * @interface ShopWithitems
 */
export interface ShopWithitems {
    /**
     * 
     * @type {string}
     * @memberof ShopWithitems
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ShopWithitems
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ShopWithitems
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ShopWithitems
     */
    'address': string;
    /**
     * 
     * @type {PointModel}
     * @memberof ShopWithitems
     */
    'coordinate': PointModel;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShopWithitems
     */
    'items'?: Array<string>;
}
/**
 * 
 * @export
 * @interface Stock
 */
export interface Stock {
    /**
     * 
     * @type {number}
     * @memberof Stock
     */
    'stocks'?: number;
    /**
     * 
     * @type {string}
     * @memberof Stock
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof Stock
     */
    'lng': number;
    /**
     * 
     * @type {number}
     * @memberof Stock
     */
    'lat': number;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface TokenNotFound
 */
export interface TokenNotFound {
    /**
     * 
     * @type {string}
     * @memberof TokenNotFound
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenNotFound
     */
    'user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenNotFound
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'is_store': boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface User1
 */
export interface User1 {
}
/**
 * 
 * @export
 * @interface UserEdit
 */
export interface UserEdit {
    /**
     * 
     * @type {string}
     * @memberof UserEdit
     */
    'token': string;
    /**
     * User name
     * @type {string}
     * @memberof UserEdit
     */
    'name'?: string;
    /**
     * User email address
     * @type {string}
     * @memberof UserEdit
     */
    'email'?: string;
    /**
     * User password
     * @type {string}
     * @memberof UserEdit
     */
    'oldpassword'?: string;
    /**
     * User password
     * @type {string}
     * @memberof UserEdit
     */
    'newpassword'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserEdit
     */
    'is_store'?: boolean;
}
/**
 * 
 * @export
 * @interface UserNotFound
 */
export interface UserNotFound {
    /**
     * 
     * @type {string}
     * @memberof UserNotFound
     */
    'detail'?: string;
    /**
     * 
     * @type {User1}
     * @memberof UserNotFound
     */
    'user'?: User1;
}
/**
 * 
 * @export
 * @interface UserSignin
 */
export interface UserSignin {
    /**
     * User email address
     * @type {string}
     * @memberof UserSignin
     */
    'email': string;
    /**
     * User password
     * @type {string}
     * @memberof UserSignin
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserSignout
 */
export interface UserSignout {
    /**
     * 
     * @type {string}
     * @memberof UserSignout
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserSignout
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface UserSignup
 */
export interface UserSignup {
    /**
     * User name
     * @type {string}
     * @memberof UserSignup
     */
    'name': string;
    /**
     * User email address
     * @type {string}
     * @memberof UserSignup
     */
    'email': string;
    /**
     * User password
     * @type {string}
     * @memberof UserSignup
     */
    'password': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserSignup
     */
    'is_store': boolean;
}
/**
 * 
 * @export
 * @interface UserWithshops
 */
export interface UserWithshops {
    /**
     * 
     * @type {string}
     * @memberof UserWithshops
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserWithshops
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserWithshops
     */
    'email'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserWithshops
     */
    'is_store': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserWithshops
     */
    'token'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserWithshops
     */
    'shops'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Item
         * @param {CreateItem} createItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItemItemPut: async (createItem: CreateItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createItem' is not null or undefined
            assertParamExists('createItemItemPut', 'createItem', createItem)
            const localVarPath = `/item/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Shop
         * @param {CreateShop} createShop 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShopShopPut: async (createShop: CreateShop, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createShop' is not null or undefined
            assertParamExists('createShopShopPut', 'createShop', createShop)
            const localVarPath = `/shop/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createShop, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Item
         * @param {string} itemId 
         * @param {DeleteItem} deleteItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemItemItemIdDelete: async (itemId: string, deleteItem: DeleteItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('deleteItemItemItemIdDelete', 'itemId', itemId)
            // verify required parameter 'deleteItem' is not null or undefined
            assertParamExists('deleteItemItemItemIdDelete', 'deleteItem', deleteItem)
            const localVarPath = `/item/{item_id}/`
                .replace(`{${"item_id"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Shop
         * @param {string} shopId 
         * @param {DeleteShop} deleteShop 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShopShopShopIdDelete: async (shopId: string, deleteShop: DeleteShop, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('deleteShopShopShopIdDelete', 'shopId', shopId)
            // verify required parameter 'deleteShop' is not null or undefined
            assertParamExists('deleteShopShopShopIdDelete', 'deleteShop', deleteShop)
            const localVarPath = `/shop/{shop_id}/`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteShop, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Favicon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faviconFaviconPngGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/favicon.png`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Item
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemItemItemIdGet: async (itemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getItemItemItemIdGet', 'itemId', itemId)
            const localVarPath = `/item/{item_id}/`
                .replace(`{${"item_id"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Itemimage
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemimageImageItemItemIdGet: async (itemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getItemimageImageItemItemIdGet', 'itemId', itemId)
            const localVarPath = `/image/item/{item_id}/`
                .replace(`{${"item_id"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Shop
         * @param {string} shopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShopShopShopIdGet: async (shopId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('getShopShopShopIdGet', 'shopId', shopId)
            const localVarPath = `/shop/{shop_id}/`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Shopimage
         * @param {string} shopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShopimageImageShopShopIdGet: async (shopId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('getShopimageImageShopShopIdGet', 'shopId', shopId)
            const localVarPath = `/image/shop/{shop_id}/`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Shopmap
         * @param {string} shopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShopmapImageMapShopIdGet: async (shopId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('getShopmapImageMapShopIdGet', 'shopId', shopId)
            const localVarPath = `/image/map/{shop_id}/`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Usericon
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsericonImageUserUserIdGet: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUsericonImageUserUserIdGet', 'userId', userId)
            const localVarPath = `/image/user/{user_id}/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchItemGet: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('searchSearchItemGet', 'name', name)
            const localVarPath = `/search/item/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchShopGet: async (address: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('searchSearchShopGet', 'address', address)
            const localVarPath = `/search/shop/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set Itemimage
         * @param {string} itemId 
         * @param {string} userId 
         * @param {string} token 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItemimageImageItemItemIdPut: async (itemId: string, userId: string, token: string, image?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('setItemimageImageItemItemIdPut', 'itemId', itemId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('setItemimageImageItemItemIdPut', 'userId', userId)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('setItemimageImageItemItemIdPut', 'token', token)
            const localVarPath = `/image/item/{item_id}/`
                .replace(`{${"item_id"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set Shopimage
         * @param {string} shopId 
         * @param {string} userId 
         * @param {string} token 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setShopimageImageShopShopIdPut: async (shopId: string, userId: string, token: string, image?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('setShopimageImageShopShopIdPut', 'shopId', shopId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('setShopimageImageShopShopIdPut', 'userId', userId)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('setShopimageImageShopShopIdPut', 'token', token)
            const localVarPath = `/image/shop/{shop_id}/`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set Shopmap
         * @param {string} shopId 
         * @param {string} userId 
         * @param {string} token 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setShopmapImageMapShopIdPut: async (shopId: string, userId: string, token: string, image?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('setShopmapImageMapShopIdPut', 'shopId', shopId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('setShopmapImageMapShopIdPut', 'userId', userId)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('setShopmapImageMapShopIdPut', 'token', token)
            const localVarPath = `/image/map/{shop_id}/`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set Usericon
         * @param {string} userId 
         * @param {string} token 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUsericonImageUserUserIdPut: async (userId: string, token: string, image?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('setUsericonImageUserUserIdPut', 'userId', userId)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('setUsericonImageUserUserIdPut', 'token', token)
            const localVarPath = `/image/user/{user_id}/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Signin
         * @param {UserSignin} userSignin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signinSigninPost: async (userSignin: UserSignin, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userSignin' is not null or undefined
            assertParamExists('signinSigninPost', 'userSignin', userSignin)
            const localVarPath = `/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userSignin, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Signout
         * @param {UserSignout} userSignout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signoutSignoutPost: async (userSignout: UserSignout, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userSignout' is not null or undefined
            assertParamExists('signoutSignoutPost', 'userSignout', userSignout)
            const localVarPath = `/signout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userSignout, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Signup
         * @param {UserSignup} userSignup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupSignupPost: async (userSignup: UserSignup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userSignup' is not null or undefined
            assertParamExists('signupSignupPost', 'userSignup', userSignup)
            const localVarPath = `/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userSignup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sso Callback
         * @param {SSOServices} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssoCallbackSsoServiceCallbackGet: async (service: SSOServices, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('ssoCallbackSsoServiceCallbackGet', 'service', service)
            const localVarPath = `/sso/{service}/callback`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sso
         * @param {SSOServices} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssoSsoServiceGet: async (service: SSOServices, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('ssoSsoServiceGet', 'service', service)
            const localVarPath = `/sso/{service}/`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Item
         * @param {string} itemId 
         * @param {EditItem} editItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemItemItemIdPut: async (itemId: string, editItem: EditItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('updateItemItemItemIdPut', 'itemId', itemId)
            // verify required parameter 'editItem' is not null or undefined
            assertParamExists('updateItemItemItemIdPut', 'editItem', editItem)
            const localVarPath = `/item/{item_id}/`
                .replace(`{${"item_id"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Shop
         * @param {string} shopId 
         * @param {EditShop} editShop 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShopShopShopIdPut: async (shopId: string, editShop: EditShop, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            assertParamExists('updateShopShopShopIdPut', 'shopId', shopId)
            // verify required parameter 'editShop' is not null or undefined
            assertParamExists('updateShopShopShopIdPut', 'editShop', editShop)
            const localVarPath = `/shop/{shop_id}/`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editShop, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Token
         * @param {Token} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTokenUpdateTokenPost: async (token: Token, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('updateTokenUpdateTokenPost', 'token', token)
            const localVarPath = `/update_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(token, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User
         * @param {string} id 
         * @param {DeleteUser} deleteUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUserIdDelete: async (id: string, deleteUser: DeleteUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userUserIdDelete', 'id', id)
            // verify required parameter 'deleteUser' is not null or undefined
            assertParamExists('userUserIdDelete', 'deleteUser', deleteUser)
            const localVarPath = `/user/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User
         * @param {string} id 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUserIdGet: async (id: string, token?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userUserIdGet', 'id', id)
            const localVarPath = `/user/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User
         * @param {string} id 
         * @param {UserEdit} userEdit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUserIdPut: async (id: string, userEdit: UserEdit, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userUserIdPut', 'id', id)
            // verify required parameter 'userEdit' is not null or undefined
            assertParamExists('userUserIdPut', 'userEdit', userEdit)
            const localVarPath = `/user/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userEdit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Item
         * @param {CreateItem} createItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createItemItemPut(createItem: CreateItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createItemItemPut(createItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Shop
         * @param {CreateShop} createShop 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShopShopPut(createShop: CreateShop, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shop>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createShopShopPut(createShop, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Item
         * @param {string} itemId 
         * @param {DeleteItem} deleteItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemItemItemIdDelete(itemId: string, deleteItem: DeleteItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemItemItemIdDelete(itemId, deleteItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Shop
         * @param {string} shopId 
         * @param {DeleteShop} deleteShop 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShopShopShopIdDelete(shopId: string, deleteShop: DeleteShop, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShopShopShopIdDelete(shopId, deleteShop, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Favicon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async faviconFaviconPngGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.faviconFaviconPngGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Item
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemItemItemIdGet(itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemItemItemIdGet(itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Itemimage
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemimageImageItemItemIdGet(itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemimageImageItemItemIdGet(itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Shop
         * @param {string} shopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShopShopShopIdGet(shopId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopWithitems>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShopShopShopIdGet(shopId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Shopimage
         * @param {string} shopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShopimageImageShopShopIdGet(shopId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShopimageImageShopShopIdGet(shopId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Shopmap
         * @param {string} shopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShopmapImageMapShopIdGet(shopId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShopmapImageMapShopIdGet(shopId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Usericon
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsericonImageUserUserIdGet(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsericonImageUserUserIdGet(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSearchItemGet(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Item>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSearchItemGet(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSearchShopGet(address: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Shop>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSearchShopGet(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set Itemimage
         * @param {string} itemId 
         * @param {string} userId 
         * @param {string} token 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setItemimageImageItemItemIdPut(itemId: string, userId: string, token: string, image?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setItemimageImageItemItemIdPut(itemId, userId, token, image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set Shopimage
         * @param {string} shopId 
         * @param {string} userId 
         * @param {string} token 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setShopimageImageShopShopIdPut(shopId: string, userId: string, token: string, image?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setShopimageImageShopShopIdPut(shopId, userId, token, image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set Shopmap
         * @param {string} shopId 
         * @param {string} userId 
         * @param {string} token 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setShopmapImageMapShopIdPut(shopId: string, userId: string, token: string, image?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setShopmapImageMapShopIdPut(shopId, userId, token, image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set Usericon
         * @param {string} userId 
         * @param {string} token 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setUsericonImageUserUserIdPut(userId: string, token: string, image?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setUsericonImageUserUserIdPut(userId, token, image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Signin
         * @param {UserSignin} userSignin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signinSigninPost(userSignin: UserSignin, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signinSigninPost(userSignin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Signout
         * @param {UserSignout} userSignout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signoutSignoutPost(userSignout: UserSignout, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signoutSignoutPost(userSignout, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Signup
         * @param {UserSignup} userSignup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signupSignupPost(userSignup: UserSignup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signupSignupPost(userSignup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sso Callback
         * @param {SSOServices} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ssoCallbackSsoServiceCallbackGet(service: SSOServices, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ssoCallbackSsoServiceCallbackGet(service, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sso
         * @param {SSOServices} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ssoSsoServiceGet(service: SSOServices, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ssoSsoServiceGet(service, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Item
         * @param {string} itemId 
         * @param {EditItem} editItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateItemItemItemIdPut(itemId: string, editItem: EditItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateItemItemItemIdPut(itemId, editItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Shop
         * @param {string} shopId 
         * @param {EditShop} editShop 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShopShopShopIdPut(shopId: string, editShop: EditShop, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShopShopShopIdPut(shopId, editShop, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Token
         * @param {Token} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTokenUpdateTokenPost(token: Token, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTokenUpdateTokenPost(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary User
         * @param {string} id 
         * @param {DeleteUser} deleteUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUserIdDelete(id: string, deleteUser: DeleteUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUserIdDelete(id, deleteUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary User
         * @param {string} id 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUserIdGet(id: string, token?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWithshops>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUserIdGet(id, token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary User
         * @param {string} id 
         * @param {UserEdit} userEdit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUserIdPut(id: string, userEdit: UserEdit, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUserIdPut(id, userEdit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Item
         * @param {CreateItem} createItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItemItemPut(createItem: CreateItem, options?: any): AxiosPromise<Item> {
            return localVarFp.createItemItemPut(createItem, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Shop
         * @param {CreateShop} createShop 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShopShopPut(createShop: CreateShop, options?: any): AxiosPromise<Shop> {
            return localVarFp.createShopShopPut(createShop, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Item
         * @param {string} itemId 
         * @param {DeleteItem} deleteItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemItemItemIdDelete(itemId: string, deleteItem: DeleteItem, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteItemItemItemIdDelete(itemId, deleteItem, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Shop
         * @param {string} shopId 
         * @param {DeleteShop} deleteShop 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShopShopShopIdDelete(shopId: string, deleteShop: DeleteShop, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteShopShopShopIdDelete(shopId, deleteShop, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Favicon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        faviconFaviconPngGet(options?: any): AxiosPromise<void> {
            return localVarFp.faviconFaviconPngGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Item
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemItemItemIdGet(itemId: string, options?: any): AxiosPromise<Item> {
            return localVarFp.getItemItemItemIdGet(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Itemimage
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemimageImageItemItemIdGet(itemId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getItemimageImageItemItemIdGet(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Shop
         * @param {string} shopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShopShopShopIdGet(shopId: string, options?: any): AxiosPromise<ShopWithitems> {
            return localVarFp.getShopShopShopIdGet(shopId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Shopimage
         * @param {string} shopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShopimageImageShopShopIdGet(shopId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getShopimageImageShopShopIdGet(shopId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Shopmap
         * @param {string} shopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShopmapImageMapShopIdGet(shopId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getShopmapImageMapShopIdGet(shopId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Usericon
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsericonImageUserUserIdGet(userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getUsericonImageUserUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchItemGet(name: string, options?: any): AxiosPromise<Array<Item>> {
            return localVarFp.searchSearchItemGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchShopGet(address: string, options?: any): AxiosPromise<Array<Shop>> {
            return localVarFp.searchSearchShopGet(address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set Itemimage
         * @param {string} itemId 
         * @param {string} userId 
         * @param {string} token 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItemimageImageItemItemIdPut(itemId: string, userId: string, token: string, image?: File, options?: any): AxiosPromise<boolean> {
            return localVarFp.setItemimageImageItemItemIdPut(itemId, userId, token, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set Shopimage
         * @param {string} shopId 
         * @param {string} userId 
         * @param {string} token 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setShopimageImageShopShopIdPut(shopId: string, userId: string, token: string, image?: File, options?: any): AxiosPromise<boolean> {
            return localVarFp.setShopimageImageShopShopIdPut(shopId, userId, token, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set Shopmap
         * @param {string} shopId 
         * @param {string} userId 
         * @param {string} token 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setShopmapImageMapShopIdPut(shopId: string, userId: string, token: string, image?: File, options?: any): AxiosPromise<boolean> {
            return localVarFp.setShopmapImageMapShopIdPut(shopId, userId, token, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set Usericon
         * @param {string} userId 
         * @param {string} token 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUsericonImageUserUserIdPut(userId: string, token: string, image?: File, options?: any): AxiosPromise<boolean> {
            return localVarFp.setUsericonImageUserUserIdPut(userId, token, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Signin
         * @param {UserSignin} userSignin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signinSigninPost(userSignin: UserSignin, options?: any): AxiosPromise<User> {
            return localVarFp.signinSigninPost(userSignin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Signout
         * @param {UserSignout} userSignout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signoutSignoutPost(userSignout: UserSignout, options?: any): AxiosPromise<boolean> {
            return localVarFp.signoutSignoutPost(userSignout, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Signup
         * @param {UserSignup} userSignup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupSignupPost(userSignup: UserSignup, options?: any): AxiosPromise<User> {
            return localVarFp.signupSignupPost(userSignup, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sso Callback
         * @param {SSOServices} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssoCallbackSsoServiceCallbackGet(service: SSOServices, options?: any): AxiosPromise<string> {
            return localVarFp.ssoCallbackSsoServiceCallbackGet(service, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sso
         * @param {SSOServices} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssoSsoServiceGet(service: SSOServices, options?: any): AxiosPromise<any> {
            return localVarFp.ssoSsoServiceGet(service, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Item
         * @param {string} itemId 
         * @param {EditItem} editItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemItemItemIdPut(itemId: string, editItem: EditItem, options?: any): AxiosPromise<boolean> {
            return localVarFp.updateItemItemItemIdPut(itemId, editItem, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Shop
         * @param {string} shopId 
         * @param {EditShop} editShop 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShopShopShopIdPut(shopId: string, editShop: EditShop, options?: any): AxiosPromise<boolean> {
            return localVarFp.updateShopShopShopIdPut(shopId, editShop, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Token
         * @param {Token} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTokenUpdateTokenPost(token: Token, options?: any): AxiosPromise<User> {
            return localVarFp.updateTokenUpdateTokenPost(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User
         * @param {string} id 
         * @param {DeleteUser} deleteUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUserIdDelete(id: string, deleteUser: DeleteUser, options?: any): AxiosPromise<boolean> {
            return localVarFp.userUserIdDelete(id, deleteUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User
         * @param {string} id 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUserIdGet(id: string, token?: string, options?: any): AxiosPromise<UserWithshops> {
            return localVarFp.userUserIdGet(id, token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User
         * @param {string} id 
         * @param {UserEdit} userEdit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUserIdPut(id: string, userEdit: UserEdit, options?: any): AxiosPromise<boolean> {
            return localVarFp.userUserIdPut(id, userEdit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create Item
     * @param {CreateItem} createItem 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createItemItemPut(createItem: CreateItem, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createItemItemPut(createItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Shop
     * @param {CreateShop} createShop 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createShopShopPut(createShop: CreateShop, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createShopShopPut(createShop, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Item
     * @param {string} itemId 
     * @param {DeleteItem} deleteItem 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteItemItemItemIdDelete(itemId: string, deleteItem: DeleteItem, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteItemItemItemIdDelete(itemId, deleteItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Shop
     * @param {string} shopId 
     * @param {DeleteShop} deleteShop 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteShopShopShopIdDelete(shopId: string, deleteShop: DeleteShop, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteShopShopShopIdDelete(shopId, deleteShop, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Favicon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public faviconFaviconPngGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).faviconFaviconPngGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Item
     * @param {string} itemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getItemItemItemIdGet(itemId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getItemItemItemIdGet(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Itemimage
     * @param {string} itemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getItemimageImageItemItemIdGet(itemId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getItemimageImageItemItemIdGet(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Shop
     * @param {string} shopId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getShopShopShopIdGet(shopId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getShopShopShopIdGet(shopId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Shopimage
     * @param {string} shopId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getShopimageImageShopShopIdGet(shopId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getShopimageImageShopShopIdGet(shopId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Shopmap
     * @param {string} shopId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getShopmapImageMapShopIdGet(shopId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getShopmapImageMapShopIdGet(shopId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Usericon
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsericonImageUserUserIdGet(userId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsericonImageUserUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchSearchItemGet(name: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchSearchItemGet(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {string} address 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchSearchShopGet(address: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchSearchShopGet(address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set Itemimage
     * @param {string} itemId 
     * @param {string} userId 
     * @param {string} token 
     * @param {File} [image] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setItemimageImageItemItemIdPut(itemId: string, userId: string, token: string, image?: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setItemimageImageItemItemIdPut(itemId, userId, token, image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set Shopimage
     * @param {string} shopId 
     * @param {string} userId 
     * @param {string} token 
     * @param {File} [image] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setShopimageImageShopShopIdPut(shopId: string, userId: string, token: string, image?: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setShopimageImageShopShopIdPut(shopId, userId, token, image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set Shopmap
     * @param {string} shopId 
     * @param {string} userId 
     * @param {string} token 
     * @param {File} [image] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setShopmapImageMapShopIdPut(shopId: string, userId: string, token: string, image?: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setShopmapImageMapShopIdPut(shopId, userId, token, image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set Usericon
     * @param {string} userId 
     * @param {string} token 
     * @param {File} [image] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setUsericonImageUserUserIdPut(userId: string, token: string, image?: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setUsericonImageUserUserIdPut(userId, token, image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Signin
     * @param {UserSignin} userSignin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signinSigninPost(userSignin: UserSignin, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).signinSigninPost(userSignin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Signout
     * @param {UserSignout} userSignout 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signoutSignoutPost(userSignout: UserSignout, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).signoutSignoutPost(userSignout, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Signup
     * @param {UserSignup} userSignup 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signupSignupPost(userSignup: UserSignup, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).signupSignupPost(userSignup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sso Callback
     * @param {SSOServices} service 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public ssoCallbackSsoServiceCallbackGet(service: SSOServices, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).ssoCallbackSsoServiceCallbackGet(service, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sso
     * @param {SSOServices} service 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public ssoSsoServiceGet(service: SSOServices, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).ssoSsoServiceGet(service, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Item
     * @param {string} itemId 
     * @param {EditItem} editItem 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateItemItemItemIdPut(itemId: string, editItem: EditItem, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateItemItemItemIdPut(itemId, editItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Shop
     * @param {string} shopId 
     * @param {EditShop} editShop 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateShopShopShopIdPut(shopId: string, editShop: EditShop, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateShopShopShopIdPut(shopId, editShop, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Token
     * @param {Token} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateTokenUpdateTokenPost(token: Token, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateTokenUpdateTokenPost(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User
     * @param {string} id 
     * @param {DeleteUser} deleteUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userUserIdDelete(id: string, deleteUser: DeleteUser, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userUserIdDelete(id, deleteUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User
     * @param {string} id 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userUserIdGet(id: string, token?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userUserIdGet(id, token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User
     * @param {string} id 
     * @param {UserEdit} userEdit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userUserIdPut(id: string, userEdit: UserEdit, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userUserIdPut(id, userEdit, options).then((request) => request(this.axios, this.basePath));
    }
}



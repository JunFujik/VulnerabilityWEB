from fastapi import FastAPI, Request
from fastapi.responses import ORJSONResponse
from .routers.user import app as user
from .routers.item import app as item
from .routers.shop import app as shop

app = FastAPI(title="GoodsPoint", description="GoodsPoint Backend API", version="0.0.3", docs_url=None, redoc_url=None, default_response_class=ORJSONResponse)
app.include_router(user)
app.include_router(item)
app.include_router(shop)

#docs icon changer

from fastapi.responses import FileResponse
from fastapi.openapi.docs import get_swagger_ui_html, get_redoc_html

@app.get('/favicon.png', response_class=FileResponse)
async def favicon():
    return FileResponse("client/src/assets/logo.png")

@app.get("/docs", include_in_schema=False)
def overridden_swagger():
	return get_swagger_ui_html(openapi_url="./openapi.json", title=app.title, swagger_favicon_url="./favicon.png")

@app.get("/redoc", include_in_schema=False)
def overridden_redoc():
	return get_redoc_html(openapi_url="./openapi.json", title=app.title, redoc_favicon_url="./favicon.png")

#Here comes Exception Handler

from fastapi.responses import JSONResponse
from .exceptions.user import TokenNotFound, Forbidden
from .exceptions.shop import ShopNotFound
from .exceptions.item import ItemNotFound
from .exceptions.file import FileError, FileNotFound

@app.exception_handler(ShopNotFound)
async def ShopNotFoundHandler(request: Request, exception: ShopNotFound):
    return JSONResponse(status_code=404, content={"detail":f"shop {exception.shop_id} is not found.", "shop":str(exception.shop_id)})

@app.exception_handler(ItemNotFound)
async def ItemNotFoundHandler(request: Request, exception: ItemNotFound):
    return JSONResponse(status_code=404, content={"detail":f"item {exception.item_id} is not found.", "item":str(exception.item_id)})

@app.exception_handler(TokenNotFound)
async def TokenNotFoundHandler(request: Request, exception: TokenNotFound):
    return JSONResponse(status_code=405, content={"detail":f"token {exception.token} for {exception.user_id} is not found. ", "user_id":str(exception.user_id), "token":str(exception.token)})

@app.exception_handler(Forbidden)
async def ForbiddenHandler(request: Request, exception: Forbidden):
    return JSONResponse(status_code=403, content={"detail":"You cant access this infomation.", "description":exception.description})

@app.exception_handler(FileError)
async def FileErrorHandler(request: Request, exception: FileError):
    return JSONResponse(status_code=403, content={"detail":"Uploaded File was wrong.", "description":exception.description})

@app.exception_handler(FileNotFound)
async def FileNotFoundHandler(request: Request, exception: FileNotFound):
    return JSONResponse(status_code=406, content={"detail":"Required file was not found.", "description":exception.description})
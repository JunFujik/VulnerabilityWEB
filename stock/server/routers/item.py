from typing import List
from uuid import UUID, uuid4
from fastapi import APIRouter, UploadFile
from server.exceptions.shop import ShopNotFound
from ..models import request as request_model, response as response_model
from ..models.database import Item, Token, Shop
from ..exceptions.user import TokenNotFound, Forbidden
from ..exceptions.item import ItemNotFound
from ..exceptions.file import FileError, FileNotFound
from ..config import get_settings
from fastapi.responses import FileResponse
import os
import aiofiles

app=APIRouter()

settings=get_settings()

@app.put("/item/", response_model=response_model.Item, responses={403: {"model": Forbidden}, 405: {"model": TokenNotFound}})
async def create_item(req:request_model.CreateItem):
    await Token.check(req.user_id, req.token)
    shop:Shop=await Shop.get(req.shop_id)
    if shop is None:
        raise ShopNotFound(req.shop_id)
    elif str(shop.user_id)!=str(req.user_id):
        raise Forbidden("You don't have permission to edit this shop.")
    req:dict=req.dict()
    req.pop("token")
    req.pop("user_id")
    shop:Item=await Item.create(**req)
    return response_model.Item.from_orm(shop)

@app.put("/item/{item_id}/", response_model=bool, responses={403: {"model": Forbidden}, 404: {"model": ItemNotFound}, 405: {"model": TokenNotFound}})
async def update_item(req:request_model.EditItem, item_id:UUID):
    await Token.check(req.user_id, req.token)
    item:Item=await Item.get(item_id)
    if item is None:
        raise ItemNotFound(item_id)
    elif str(item.shop.user_id)!=str(req.user_id):
        raise Forbidden("You don't have permission to edit this shop.")
    if req.stock == "stock":
        request_model.Stock.validate(req.value)
    try:
        await Item.update(item_id, **{i:v for i, v in req.dict().items() if v is not None and not i in ["user_id", "token"]})
    except:
        from traceback import format_exc
        print(format_exc())
        return False
    else:
        return True

@app.get("/item/{item_id}/", response_model=response_model.Item, responses={403: {"model": Forbidden}, 404: {"model": ItemNotFound}})
async def get_item(item_id:UUID):
    item:Item=await Item.get(item_id)
    if item is None:
        raise ItemNotFound(item_id)
    return item

@app.delete("/item/{item_id}/", response_model=bool, responses={403: {"model": Forbidden}, 404: {"model": ItemNotFound}, 405: {"model": TokenNotFound}})
async def delete_item(req:request_model.DeleteItem, item_id:UUID):
    await Token.check(req.user_id, req.token)
    item:Item=await Item.get(item_id)
    if item is None:
        raise ItemNotFound(item_id)
    elif str(item.shop.user_id)!=str(req.user_id):
        raise Forbidden("You don't have permission to edit this shop.")
    try:
        await Item.delete(item_id)
    except:
        from traceback import format_exc
        print(format_exc())
        return False
    else:
        return True

@app.put("/image/item/{item_id}/", response_model=bool)
async def set_itemimage(item_id:UUID, user_id:UUID, token:UUID, image:UploadFile=None):
    await Token.check(user_id, token)
    item:Item=await Item.get(item_id)
    if item is None:
        raise ItemNotFound(item_id)
    if not image.content_type in ["image/png","image/jpeg"]:
        raise FileError("File type is not allowed.")
    elif str(item.shop.user_id)!=str(user_id):
        raise Forbidden("You don't have permission to edit this shop.")
    if item.icon is not None:
        if os.path.exists(os.path.join(settings.image_storage, item.icon)): os.remove(os.path.join(settings.image_storage, item.icon))
    if image is None:
        icon=None
    else:
        size=0
        icon=str(uuid4())+os.path.splitext(image.filename)[1]
        async with aiofiles.open(os.path.join(settings.image_storage, icon), "wb") as icon_file:
            while content := await image.read(1024):
                size+=1
                if size==10240:
                    raise FileError("File is too large.")
                await icon_file.write(content)
    await Item.update(item_id, icon=icon)
    return True

@app.get("/image/item/{item_id}/", response_class=FileResponse)
async def get_itemimage(item_id:UUID):
    item:Item=await Item.get(item_id)
    if item is None:
        raise ShopNotFound(item_id)
    if item.icon is None:
        raise FileNotFound(f"itemimage for item {item_id} is not found")
    return FileResponse(os.path.join(settings.image_storage, item.icon))

@app.get("/search/item/", response_model=List[response_model.Item])
async def search(name:str):
    return await Item.search_byname(name)